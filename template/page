<template>
  <auth-page>
    <v-layout>
      <data-grid ref="dataGrid" api="XXXXXX/XXXXXX/XXXXXX" v-model="model" :params="params" {{^page}}:page='false'{{/page}}
                 :items="tableItem">
        {{#message}}
        <!--   提示栏 （只做展示，并且包一层蓝色）    -->
        <template slot="operator">
          <Alert>
            <div>
              提示：该内容只用于展示，记得更换！！！！
            </div>
          </Alert>
        </template>
        {{/message}}

        {{#export}}
        <!--   功能栏 （例如：导出）    -->
        <template slot="operator">
            // 导出
            <el-button type="primary" @click="handleExport" :loading='loading'>导 出</el-button>
        </template>
        {{/export}}

        <!--    内容    -->
        <template>
          {{#serial}}
          <!--    序号    -->
          <el-table-column type="index" label="序号" align="center"></el-table-column>
          {{/serial}}

          <el-table-column prop='' label="" align="center"></el-table-column>

          <!--    表格操作    -->
          <el-table-column prop="projectNames" label="操作" align="center">
            <template slot-scope="{row}">
              <el-button type="text" {{#dialog}}@click="handleOpenDialog(row)"{{/dialog}}>
                查看
              </el-button>
            </template>
          </el-table-column>
        </template>

        <!--    弹窗 （建议写成组件）    -->
        {{ #dialog }}
        <template slot="dialog">
          <!--    类型确认框    -->
          <type ref="type" {{#dialogUpdate}}@confirm="$refs.dataGrid.select()"{{/dialogUpdate}}></type>
        </template>
        {{ /dialog}}
      </data-grid>
    </v-layout>
  </auth-page>
</template>

<script>
{{#dialog}}
import Type from './component/type'
{{/dialog}}

export default {
  name: '{{ name }}',
  {{#dialog}}
  components: {
      Type
  },
  {{/dialog}}
  data () {
    return {
      model: {},  // 表格搜索栏
      loading: false,   // 是否处于加载中
      tableItem: [  //
        {
          label: '项目名称：',
          prop: 'name',
          placeholder: '请输入项目名称'
        }
      ],
    }
  },
  computed: {
    params: function () {
      let params = {...this.model}

      return params
    }
  },
  methods: {
    {{#dialog}}
    /**
    * 初始化弹窗
    */
    handleOpenDialog: function (row) {
      this.$refs.type.init(row)
    },
    {{/dialog}}
    {{#export}}
    /**
    * 请求接口，并且自动触发下载文件
    */
    handleExport: function () {
       if (!this.loading) {
         this.loading = true
         this.$api('XXXXXXXX/XXXXXXXXX/XXXXXXXX', this.params).then(res => {
           console.log(res)

           // 创建 a 标签，并且自动触发
           let aDom = document.createElement('a')
           aDom.setAttribute('href', res)
           document.body.appendChild(aDom)
           aDom.click()
         }).catch(error => {
           this.$tips(error.msg, 'error')
         }).finally(() => {
           this.loading = false
         })
       }
    },
    {{/export}}
  }
}
</script>

<style lang="less" scoped>
</style>
